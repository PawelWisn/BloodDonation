"use strict";

function _extends() {
  return (_extends = Object.assign || function(a) {
    var b, e, d;
    for (b = 1; b < arguments.length; b++) {
      e = arguments[b];
      for (d in e) {
        Object.prototype.hasOwnProperty.call(e, d) && (a[d] = e[d]);
      }
    }
    return a;
  }).apply(this, arguments);
}

function _ref2(a) {
  return "teardown" === a.kind;
}

function _ref3(a) {
  return "teardown" !== a.kind;
}

var wonka = require("wonka"), core = require("@urql/core"), addAuthAttemptToOperation = function(a, b) {
  return core.makeOperation(a.kind, a, _extends({}, a.context, {
    authAttempt: b
  }));
};

exports.authExchange = function authExchange(a) {
  var b = a.addAuthToOperation, e = a.getAuth, d = a.didAuthError, m = a.willAuthError;
  return function(a) {
    function t(a) {
      return b({
        operation: a,
        authState: f
      });
    }
    var w, n, f, u = a.client, v = a.forward, g = new Map;
    a = wonka.makeSubject();
    w = a.source, n = a.next, f = null;
    return function(a) {
      function b(a, b, c) {
        var p = u.createRequestOperation("mutation", core.createRequest(a, b), c);
        return wonka.toPromise(wonka.take(1)(wonka.filter((function(a) {
          return a.operation.key === p.key;
        }))(wonka.onStart((function() {
          return n(p);
        }))(q))));
      }
      function x() {
        return h(null);
      }
      var l, q, h = function(a) {
        f = a;
        c = void 0;
        g.forEach(n);
        g.clear();
      }, c = Promise.resolve().then((function() {
        return e({
          authState: f,
          mutate: b
        });
      })).then(h), r = function(a) {
        a = addAuthAttemptToOperation(a, !0);
        g.set(a.key, a);
        c || (c = e({
          authState: f,
          mutate: b
        }).then(h).catch(x));
        return c;
      }, k = wonka.share(a);
      a = wonka.filter(_ref2)(k);
      l = wonka.filter(_ref3)(k);
      l = wonka.map(t)(wonka.merge([ w, wonka.mergeMap((function(a) {
        if (!c && m && m({
          operation: a,
          authState: f
        })) {
          return c = r(a), wonka.empty;
        }
        if (!c) {
          return wonka.fromValue(addAuthAttemptToOperation(a, !1));
        }
        var b = wonka.filter((function(b) {
          return "teardown" === b.kind && b.key === a.key;
        }))(k);
        return wonka.takeUntil(b)(wonka.map((function() {
          return addAuthAttemptToOperation(a, !1);
        }))(wonka.fromPromise(c)));
      }))(l) ]));
      q = wonka.share(v(wonka.merge([ l, a ])));
      return wonka.filter((function(a) {
        var b = a.error;
        a = a.operation;
        return b && d && d({
          error: b,
          authState: f
        }) && !a.context.authAttempt ? (c = r(a), !1) : !0;
      }))(q);
    };
  };
};
//# sourceMappingURL=urql-exchange-auth.js.map
